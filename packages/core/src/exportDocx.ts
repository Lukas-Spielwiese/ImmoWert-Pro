import { Document, Packer, Paragraph, HeadingLevel, Table, TableRow, TableCell, AlignmentType, TextRun } from 'docx';
import { CalcResult } from './types';
export async function exportDocxBuffer({ titel, stichtag, module, parameter }:{ titel: string; stichtag: string; module: Record<string, CalcResult>; parameter: Record<string, string>; }){ const sections: any[] = [{ children: [ new Paragraph({ text: titel, heading: HeadingLevel.TITLE }), new Paragraph(`Stichtag: ${stichtag}`), new Paragraph({ text: 'Parameterblatt (§§ 9/12)', heading: HeadingLevel.HEADING_2 }), new Table({ rows: Object.entries(parameter).map(([k, v]) => new TableRow({ children: [ new TableCell({ children: [new Paragraph(k)] }), new TableCell({ children: [new Paragraph(String(v))] }) ] })) }), ...Object.entries(module).flatMap(([name, res]) => [ new Paragraph({ text: name, heading: HeadingLevel.HEADING_2 }), new Table({ rows: [ ...res.protokoll.map(l => new TableRow({ children: [ new TableCell({ children: [new Paragraph(l.label)] }), new TableCell({ children: [new Paragraph({ text: String(l.value), alignment: AlignmentType.RIGHT })] }) ] })), new TableRow({ children: [ new TableCell({ children: [new Paragraph('Ergebnis')] }), new TableCell({ children: [new Paragraph(String(res.wert))] }) ] }) ] }) ]), new Paragraph({ text: 'Plausibilisierung & Gewichtung (§6)', heading: HeadingLevel.HEADING_2 }), new Paragraph({ children: [new TextRun('Hinweis: Die Plausibilisierungstabelle wird im UI gepflegt und hier übernommen.')] }) ] }]; const doc = new Document({ sections }); const buffer = await Packer.toBuffer(doc); return buffer; }
